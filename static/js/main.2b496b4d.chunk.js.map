{"version":3,"sources":["pages/Home.jsx","pages/Projects.jsx","pages/Resume.jsx","pages/UnknownRoute.jsx","serviceWorker.js","index.js","App.jsx","utils/constants/routerConstants.js"],"names":["Home","className","Container","Row","Col","xs","Image","style","width","height","src","roundedCircle","color","size","icon","faEnvelope","href","target","rel","faLinkedin","faGithub","faTwitter","Button","variant","to","Projects","Resume","UnknownRoute","Boolean","window","location","hostname","match","ReactDOM","render","basename","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qTAQaA,EAAO,WAIlB,OACE,yBAAKC,UAAU,iDACb,yBAAKA,UAAU,WACb,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKF,UAAU,8CACb,kBAACG,EAAA,EAAD,CAAKC,GAAG,QACN,kBAACC,EAAA,EAAD,CAAOC,MAAO,CAAEC,MAAO,QAASC,OAAQ,SAAWC,IAAI,wLAAwLC,eAAa,KAE9P,kBAACP,EAAA,EAAD,CAAKC,GAAG,QACN,wBAAIJ,UAAU,aAAd,qBAGJ,kBAACE,EAAA,EAAD,CAAKF,UAAU,QACb,kBAACG,EAAA,EAAD,CAAKC,GAAG,MACN,sRAEF,kBAACD,EAAA,EAAD,CAAKH,UAAU,OAAOI,GAAG,QACvB,kBAAC,IAAD,CAAiBO,MAAM,QAAQC,KAAK,KAAKC,KAAMC,OAEjD,kBAACX,EAAA,EAAD,CAAKH,UAAU,QACb,oDAGJ,kBAACE,EAAA,EAAD,CAAKF,UAAU,QACb,kBAACG,EAAA,EAAD,CAAKC,GAAG,QAAO,uBAAGW,KAAK,4CAA4CC,OAAO,SAASC,IAAI,uBAAsB,kBAAC,IAAD,CAAiBN,MAAM,QAAQC,KAAK,KAAKC,KAAMK,QAC5J,kBAACf,EAAA,EAAD,CAAKC,GAAG,QAAO,uBAAGW,KAAK,8BAA8BC,OAAO,SAASC,IAAI,uBAAsB,kBAAC,IAAD,CAAiBN,MAAM,QAAQC,KAAK,KAAKC,KAAMM,QAC9I,kBAAChB,EAAA,EAAD,CAAKC,GAAG,QAAO,uBAAGW,KAAK,oCAAoCC,OAAO,SAASC,IAAI,uBAAsB,kBAAC,IAAD,CAAiBN,MAAM,QAAQC,KAAK,KAAKC,KAAMO,SAEtJ,kBAAClB,EAAA,EAAD,CAAKF,UAAU,6CACb,kBAACG,EAAA,EAAD,CAAKC,GAAG,QACN,kBAACiB,EAAA,EAAD,CAAQC,QAAQ,WAAU,kBAAC,IAAD,CAAMC,GAAG,YAAT,aAE5B,kBAACpB,EAAA,EAAD,CAAKC,GAAG,QACN,kBAACiB,EAAA,EAAD,CAAQrB,UAAU,uBAAuBsB,QAAQ,WAAjD,uBC3CDE,EAAW,WACtB,OACE,0CCFSC,EAAS,WACpB,OACE,wCCFSC,EAAe,WAC1B,OACE,+CCQgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,mBCGG,WACjB,OACE,kBAAC,IAAD,CAAQC,SAAS,KACf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KCdD,IDcmBC,UAAWtC,IAC1C,kBAAC,IAAD,CAAOqC,KCdS,YDcaC,UAAWb,IACxC,kBAAC,IAAD,CAAOY,KCdO,UDcaC,UAAWZ,IACtC,kBAAC,IAAD,CAAOY,UAAWX,QDVV,MAASY,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2b496b4d.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { Container, Row, Col, Image, Button } from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faEnvelope } from '@fortawesome/free-solid-svg-icons'\r\nimport { faTwitter, faGithub, faLinkedin } from '@fortawesome/free-brands-svg-icons'\r\n\r\nexport const Home = () => {\r\n\r\n  // const openProjects\r\n\r\n  return (\r\n    <div className=\"container h-100 d-flex justify-content-center\">\r\n      <div className=\"my-auto\">\r\n        <Container>\r\n          <Row className=\"align-items-center justify-content-between\">\r\n            <Col xs=\"auto\">\r\n              <Image style={{ width: \"150px\", height: \"150px\" }} src=\"https://previews.123rf.com/images/triken/triken1608/triken160800029/61320775-male-avatar-profile-picture-default-user-avatar-guest-avatar-simply-human-head-vector-illustration-i.jpg\" roundedCircle></Image>\r\n            </Col>\r\n            <Col xs=\"auto\">\r\n              <h1 className=\"display-4\">Hey, I'm Person</h1>\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"my-5\">\r\n            <Col xs=\"12\">\r\n              <h6>Lorem ipsum dolor sit amet consectetur adipisicing elit. Hic possimus, perspiciatis dolores dicta voluptates sequi necessitatibus molestiae quia deleniti voluptatibus nulla ipsa excepturi provident doloribus laudantium commodi maxime nostrum in.</h6>\r\n            </Col>\r\n            <Col className=\"mt-3\" xs=\"auto\">\r\n              <FontAwesomeIcon color=\"white\" size=\"lg\" icon={faEnvelope} />\r\n            </Col>\r\n            <Col className=\"mt-3\">\r\n              <h6>jama3137@gmail.com</h6>\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"mb-5\">\r\n            <Col xs=\"auto\"><a href=\"https://www.linkedin.com/in/jama-mohamed/\" target=\"_blank\" rel=\"noopener noreferrer\"><FontAwesomeIcon color=\"white\" size=\"3x\" icon={faLinkedin} /></a></Col>\r\n            <Col xs=\"auto\"><a href=\"https://github.com/jama5262\" target=\"_blank\" rel=\"noopener noreferrer\"><FontAwesomeIcon color=\"white\" size=\"3x\" icon={faGithub} /></a></Col>\r\n            <Col xs=\"auto\"><a href=\"https://twitter.com/timedjama5262\" target=\"_blank\" rel=\"noopener noreferrer\"><FontAwesomeIcon color=\"white\" size=\"3x\" icon={faTwitter} /></a></Col>\r\n          </Row>\r\n          <Row className=\"align-items-center justify-content-center\">\r\n            <Col xs=\"auto\">\r\n              <Button variant=\"primary\"><Link to=\"/contact\">Contact</Link></Button>\r\n            </Col>\r\n            <Col xs=\"auto\">\r\n              <Button className=\"animateProjectButton\" variant=\"primary\">View Projects</Button>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport const Projects = () => {\r\n  return (\r\n    <div>\r\n      Projects\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport const Resume = () => {\r\n  return (\r\n    <div>\r\n      resume\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport const UnknownRoute = () => {\r\n  return (\r\n    <div>\r\n      this is a 404\r\n    </div>\r\n  )\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./style/style.css\"\nimport { App } from \"./App\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { Route, HashRouter as Router, Switch } from 'react-router-dom'\n\nimport * as paths from \"./utils/constants/routerConstants\"\n\nimport { Home } from \"./pages/Home\";\nimport { Projects } from \"./pages/Projects\";\nimport { Resume } from \"./pages/Resume\";\nimport { UnknownRoute } from \"./pages/UnknownRoute\";\n\nexport const App = () => {\n  return (\n    <Router basename='/'>\n      <Switch>\n        <Route exact path={paths.HOME} component={Home} />\n        <Route path={paths.PROJECTS} component={Projects} />\n        <Route path={paths.RESUME} component={Resume} />\n        <Route component={UnknownRoute} />\n      </Switch>\n    </Router>\n  )\n}\n","export const HOME = '/';\r\nexport const PROJECTS = '/projects';\r\nexport const RESUME = '/resume';"],"sourceRoot":""}